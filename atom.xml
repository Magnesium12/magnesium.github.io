<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>12TH`s Cabin</title>
  
  <subtitle>Who will fall in love with ordinary?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zlee.xyz/"/>
  <updated>2018-12-15T16:25:09.315Z</updated>
  <id>https://zlee.xyz/</id>
  
  <author>
    <name>Kevin Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Next</title>
    <link href="https://zlee.xyz/2018/12/16/The%20NexT/"/>
    <id>https://zlee.xyz/2018/12/16/The NexT/</id>
    <published>2018-12-16T12:47:25.000Z</published>
    <updated>2018-12-15T16:25:09.315Z</updated>
    
    <content type="html"><![CDATA[<p></p><p blockquote="" class="centerquote"><i>谨以此文, 纪念一个误入NexT坑的年轻人</i></p><a id="more"></a><h1 id="Next主题个性化"><a href="#Next主题个性化" class="headerlink" title="Next主题个性化"></a>Next主题个性化</h1><blockquote><p>Tips:<br><code>hexo s</code>后可以直接本地调试，也就是更改文件保存后，Hexo 后台会自动重新渲染文件，所以只要稍等片刻，浏览器刷新一下就能看到效果。</p></blockquote><h2 id="无序列表圆点"><a href="#无序列表圆点" class="headerlink" title="无序列表圆点"></a>无序列表圆点</h2><p>不喜欢默认空心圆无序列表，我们换成实心的列表：</p><p>主题目录：</p><p><code>source/css/_common/components/post/post-expand.styl:</code><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul </span><span class="string">li </span>&#123; <span class="built_in">list-style:</span> <span class="string">disc;</span> &#125;</span><br></pre></td></tr></table></figure></div></p><p>页面列表：<br><code>next/source/css/_custom/custom.styl:</code><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul </span>&#123;</span><br><span class="line">    <span class="built_in">list-style-type:</span> <span class="string">disc;</span>  // 空心圆，实心圆为 <span class="string">disc</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div></p><p>参考：<a href="https://github.com/iissnan/hexo-theme-next/issues/559" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/issues/559</a></p><h2 id="主页文章阴影"><a href="#主页文章阴影" class="headerlink" title="主页文章阴影"></a>主页文章阴影</h2><p>打开\themes/next/source/css/_custom/下的custom.styl, 添加<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h2><p>打开主题配置文件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="meta"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line">pace: <span class="literal">false</span> #点击上述链接, 下载pace. 然后把这个修改为<span class="literal">true</span></span><br><span class="line"><span class="meta"># Themes list:</span></span><br><span class="line"><span class="meta">#pace-theme-big-counter</span></span><br><span class="line"><span class="meta">#pace-theme-bounce</span></span><br><span class="line"><span class="meta">#pace-theme-barber-shop</span></span><br><span class="line"><span class="meta">#pace-theme-center-atom</span></span><br><span class="line"><span class="meta">#pace-theme-center-circle</span></span><br><span class="line"><span class="meta">#pace-theme-center-radar</span></span><br><span class="line"><span class="meta">#pace-theme-center-simple</span></span><br><span class="line"><span class="meta">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="meta">#pace-theme-fill-left</span></span><br><span class="line"><span class="meta">#pace-theme-flash</span></span><br><span class="line"><span class="meta">#pace-theme-loading-bar</span></span><br><span class="line"><span class="meta">#pace-theme-mac-osx</span></span><br><span class="line"><span class="meta">#pace-theme-minimal</span></span><br><span class="line"><span class="meta"># For example</span></span><br><span class="line"><span class="meta"># pace_theme: pace-theme-center-simple</span></span><br><span class="line">pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure></div></p><h2 id="修改网页底部图标"><a href="#修改网页底部图标" class="headerlink" title="修改网页底部图标"></a>修改网页底部图标</h2><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"copyrightYear"</span>&gt;</span></span><span class="template-variable">&#123;&#123; current &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span> <span class="attr">id</span>=<span class="string">"animate"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-igloo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></p><p>前往<a href="https://fontawesome.com/" target="_blank" rel="noopener">FontAwesome</a>获取相应图标并替换</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fas fa-igloo"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>打开<code>themes-&gt;next-&gt;layout-&gt;\_partials-&gt;head-&gt;head.swig</code>文件,在以下位置插入这样一段代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误！'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (history.length === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    location.replace(<span class="string">"http://zlee.xyz"</span>); <span class="comment">// 这里替换成你的首页</span></span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                    history.back();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="萌え萌えlive2d"><a href="#萌え萌えlive2d" class="headerlink" title="萌え萌えlive2d"></a>萌え萌えlive2d</h2><p>首先安装live2d模块<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure></div></p><p>然后选择要安装的live2d模型<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-[填入代号]</span><br></pre></td></tr></table></figure></div></p><p>在站点/主题配置文件_config.yml中追加<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class="line"><span class="comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-koharu</span></span><br><span class="line"><span class="attr">    scale:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">    vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    superSample:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">left</span></span><br><span class="line"><span class="attr">    hOffset:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    vOffset:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    scale:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line"><span class="attr">    opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure></div></p><p>大小方向自行调参, 重新生成即可. 如果生成出现<strong>YAML 解析错误</strong>, 请检查是否正确采用<code>tab</code>缩进.</p><h2 id="设置代码块"><a href="#设置代码块" class="headerlink" title="设置代码块"></a>设置代码块</h2><p>这是一个很长的故事…….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p blockquote=&quot;&quot; class=&quot;centerquote&quot;&gt;&lt;i&gt;谨以此文, 纪念一个误入NexT坑的年轻人&lt;/i&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zlee.xyz/categories/Hexo/"/>
    
    
      <category term="施工中" scheme="https://zlee.xyz/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"/>
    
      <category term="一时兴起" scheme="https://zlee.xyz/tags/%E4%B8%80%E6%97%B6%E5%85%B4%E8%B5%B7/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://zlee.xyz/2018/12/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://zlee.xyz/2018/12/13/数据结构/</id>
    <published>2018-12-13T00:36:32.000Z</published>
    <updated>2018-12-28T11:50:45.234Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i0.hdslb.com/bfs/archive/4c9309085933d7cee42218ca647f01f1ca7b46ac.jpg" alt="希尔~~排序~~"></p><p><blockquote class="blockquote-center"><i>谨以此文, 纪念我没怎么听过的数据结构</i></blockquote><br><a id="more"></a></p><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是数据元素的非空有限集合</p><ul><li>唯一一个“ 开始节点”</li><li>唯一一个” 终端节点“</li><li>除开始结点外，集合中的每个数据元素均只有一个直接前驱</li><li>除终端结点外，集合中的每个数据元素均只有一个直接后继</li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>线性表的结点按逻辑次序存放在一组地址连续的存储单元里, 例如数组</p><p><strong>loc(ai)=loc(a1)+(i-1)*c</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>插入算法和删除算法都是O(n)</p><p>### </p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul><li>对由n个记录组成的表(或文件)L=(r1,r2,…….,rn)，依据记录中某个数据项的值重新进行排列的过程称之为<strong>排序（sorting）</strong>，该数据项称为排序码，一般情况下， 总是选择记录的关键码(字)作为排序码。</li><li>如果待排序的表中含有多个排序码值相等的记录，用某种排序方法排序后，这些记录的相对次序不变，则说这种排序方法为稳定的（stable），否则是不稳定的。</li><li>按照待排序数据驻留的介质不同排序问题可分为内部排序(Internal sorting)和外部排序(External sorting)两类：<ol><li>内排序:  待排序的表中记录可存放内存，整个排序过程都在内存进行，只涉及对内存的访问。</li><li>外排序:   待排序的表中含有巨量记录，无法存放到内存，整个排序过程都在外存进行，涉及对外存的访问。</li></ol></li><li>按照排序的依据原则内部排序可分为：插入排序、交换排序、选择排序、归并排序和分配排序等五类。</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>顾名思义<br>最好的情况是已经排好序:O(n), 最坏的情况是:O(n*n)<br>该排序是<strong>稳定排序</strong></p><blockquote><p>请注意, 插入排序有大量的插入操作, 默认使用链表</p></blockquote><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>顾名思义<br>复杂度为O(n*n), 如果已经有序, 则 复杂度为O(n^2^)<br>该排序是<strong>稳定排序</strong></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>又叫递减增量排序</p><blockquote><p><del>希尔排序听起来总让我想起崩坏学园</del></p></blockquote><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>希尔排序的性能大约为:<br>O(n^3/2^)<br>希尔排序是<strong>不稳定的</strong></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//留待填坑</span></span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>快速排序(Quick sort)</strong> 的基本思想是选取被排序表中某个关键码作为基准(pivot)，将表划分成左右两个子表： 左子表中各记录的关键码均小于或等于基准值，而右子表中各记录的关键码均大于或等于基准值。然后以同样的方法递归地处理这两个子表，直到完成全部记录的排序。<br>该排序是<strong>不稳定排序</strong></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>对含有n个记录的表，若算法总是以子表中间记录的关键码作为基准划分,最坏的情况(基准为最小或最大)是每次将将表分为含1个记录的子表和含n-1个记录的子表。需划分n次，比较次数为：<br><strong>n*(n-1)/2=O(n^2^)</strong></p><p>若总是以子表的第一个记录的关键码作为基准划分,  当被排序的表是按关键码有序或逆序，将出现最坏的情况。设c(n)为用QuickSort算法对含有n个记录的表进行排序所作的比较次数, s(n)为交换次数，显然c(1)=0和s(1)=0。 算法将n个记录的表划分为r记录和n-r记录两个子表需比较n次。所以<br>​          c(n)=n+c(r)+c(n-r)<br>对于最坏情形:每次划分时r=1,  n-r=n-1, 则有:<br>​          c(n)=n+c(1)+c(n-1)=n+c(n-1)<br>于是下列诸式成立:<br>​          c(1)=0<br>​          c(2)=2+c(1)=2<br>​          c(3)=3+c(2)=3+2=5<br>​          c(4)=4+c(3)=4+3+2=9<br>​          ……..<br>​          c(n)=n+c(n-1)=n+(n-1)+(n-2)+….+3+2=(n+2)(n-1)/2<br>​           =(n2+n-2)/2=O(n2)</p><p>若 QuickSort 算法总是以表中关键码的中值作为基准划分,将出现最好的情况：每次将表分为两个长度大致相等的子表。<br>​         c(n)≤n+2c(n/2)<br>​                 ≤n+2[n/2+2c(n/22)]=2n+4c(n/22)<br>​                 ≤2n+4[n/4+2c(n/23)]=3n+8c(n/23)<br>​                 ≤……..<br>​                 ≤kn+2kc(n/2k)=nlog2n+nc(1)=O(nlog2n)<br>​          (这里：k=log2n )<br>对于交换次数, 有 s(n)&lt;=O(nlog~2~n)</p><p>快速排序是<strong>不稳定的</strong></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>归并排序（merge sort）</strong>是归并操作上的一种有效的排序算法<br>归并排序每次都是在相邻的数据中进行操作，在O(N*logN)的几种排序方法（快速排序，归并排序，希尔排序，堆排序）也是效率比较高的。</p><blockquote><p>设数列长为N，将数列分开成小数列一共要logN步，每步都是一个合并有序数列的过程，时间复杂度可以记为O(N)，故一共为O(N*logN)。</p></blockquote><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>对于整体无序的数列</p><ol><li>递归(recursion)分割数列为左右两部分, 直至数列不可再分</li><li>对当前不可再分的左右数列进行归并</li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> front, <span class="keyword">int</span> mid, <span class="keyword">int</span> rear, <span class="keyword">int</span> temp[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = front, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">&#123;</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= rear)</span><br><span class="line">&#123;</span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[front + i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> front, <span class="keyword">int</span> rear, <span class="keyword">int</span> temp[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (front&lt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (front + rear) / <span class="number">2</span>;</span><br><span class="line">recursive(arr, front, mid, temp);</span><br><span class="line">recursive(arr, mid + <span class="number">1</span>, rear, temp);</span><br><span class="line">merge(arr, front, mid, rear, temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//辅助表空间, 避免数列数组被覆写, 省去临时声明空间的时间开销</span></span><br><span class="line"><span class="keyword">int</span>* temp = <span class="keyword">new</span> <span class="keyword">int</span> [n];</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recursive(arr, <span class="number">0</span>, n - <span class="number">1</span>, temp);</span><br><span class="line"><span class="keyword">delete</span>[] temp;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">8</span>] = &#123; <span class="number">12</span>,<span class="number">12</span>,<span class="number">123</span>,<span class="number">45</span>,<span class="number">654</span>,<span class="number">78</span>,<span class="number">96</span>,<span class="number">2</span> &#125;;</span><br><span class="line">mergeSort(arr, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是利用堆这种数据结构而设计的一种排序算法，它是一种<strong>选择排序</strong>.<br>它的最坏，最好，平均时间复杂度均为<strong>O(nlogn)</strong>，它也是<strong>不稳定排序</strong>.</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><ol><li><p>将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</p></li><li><p>将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</p></li><li><p>重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</p></li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> front, <span class="keyword">int</span> rear)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>tmp = arr[front];</span><br><span class="line">arr[front] = arr[rear];</span><br><span class="line">arr[rear] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i * <span class="number">2</span> + <span class="number">1</span>; k &lt; len; k = k * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((k + <span class="number">1</span>) &lt; len&amp;&amp;arr[k] &lt; arr[k + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr[k] &gt; temp)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = arr[k];</span><br><span class="line">i = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 构建大顶堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">adjustHeap(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 交换堆顶元素和末尾元素, 调整堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i);</span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">8</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">78</span>,<span class="number">98</span>,<span class="number">45</span>,<span class="number">32</span> &#125;;</span><br><span class="line">sort(arr, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p><strong>基数排序 (radix sort) </strong>属于”分配式排序”  (distribution sort) , 重点在于对关键字进行 “分配” 和 “收集” , 而不是对关键字的比较.<br>基数排序算法是<strong>稳定</strong>的, 时间复杂度是O(d*(n＋r))</p><blockquote><p>将表中n个记录分配到r个队列中去的时间为O(n), 收集时将r个队列连成一个表的时间O(r), 一次分配和收集的时间为O(n＋r), 由于算法对n个记录共进行了d遍分配和收集,所以共花费的时间为O(d*(n＋r)).</p></blockquote><h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a>算法思路</h3><ol><li>将关键码按照位数最小/最大值分配入箱</li><li>按照箱子的顺序收集关键码</li><li>重复1，2步骤直到位数到达最大/最小值</li></ol><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>最高位优先(Most Significant Digit first)，简称MSD<br>最低位优先(Least Significant Digit first)，简称LSD<br>下面采用LSD法，值得一提的是，这种实现比较耗费内存, 从理论上来说, 申请的数组空间利用率只有10%.<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序数组实现*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> RADIX = <span class="number">10</span>;<span class="comment">//桶数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">10</span>;<span class="comment">//桶容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDigit</span><span class="params">(<span class="keyword">int</span> src, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">temp *= <span class="number">10</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> (src / temp) % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radixSort_Array</span><span class="params">(<span class="keyword">int</span> *src, <span class="keyword">int</span> digits)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tempArray[RADIX];<span class="comment">//定义桶数 RADIX</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RADIX; ++i)<span class="comment">//定义桶容量</span></span><br><span class="line">&#123;</span><br><span class="line">tempArray[i] = <span class="keyword">new</span> <span class="keyword">int</span> [Max + <span class="number">1</span>];</span><br><span class="line">tempArray[i][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//初始化为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">1</span>; pos &lt;= digits; ++pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max; ++i)<span class="comment">//分配进桶</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = getDigit(src[i], pos);<span class="comment">//获取指定位的数字</span></span><br><span class="line">++tempArray[tmp][<span class="number">0</span>];</span><br><span class="line">tempArray[tmp][tempArray[tmp][<span class="number">0</span>]] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;RADIX; ++i)<span class="comment">//收集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=tempArray[i][<span class="number">0</span>]; ++j )</span><br><span class="line">&#123;</span><br><span class="line">src[index++] = tempArray[i][j];</span><br><span class="line">&#125;</span><br><span class="line">tempArray[i][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//重置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; src[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> src[Max] = &#123; <span class="number">12</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="number">14</span>,<span class="number">56</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">12</span>,<span class="number">456</span>,<span class="number">789</span> &#125;;</span><br><span class="line"><span class="comment">/*std::cout &lt;&lt; "最大三位数" &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">for (RADIX_t i = 0; i &lt; Max; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">std::cin &gt;&gt; src[i];</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; src[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">radixSort_Array(src, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; src[i]&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i0.hdslb.com/bfs/archive/4c9309085933d7cee42218ca647f01f1ca7b46ac.jpg&quot; alt=&quot;希尔~~排序~~&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;i&gt;谨以此文, 纪念我没怎么听过的数据结构&lt;/i&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="课程" scheme="https://zlee.xyz/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="课程笔记" scheme="https://zlee.xyz/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="自学OTZ" scheme="https://zlee.xyz/tags/%E8%87%AA%E5%AD%A6OTZ/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial For Hexo</title>
    <link href="https://zlee.xyz/2018/12/12/Simple-Tutorial-For-Hexo/"/>
    <id>https://zlee.xyz/2018/12/12/Simple-Tutorial-For-Hexo/</id>
    <published>2018-12-12T12:47:25.000Z</published>
    <updated>2018-12-20T03:00:52.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。Hexo同时也是GitHub上的开源项目，如果想要更加全面的了解Hexo，可以到其官网 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，你可以查阅到优质的中文文档.</p></blockquote><a id="more"></a><h2 id="Hexo基础"><a href="#Hexo基础" class="headerlink" title="Hexo基础"></a>Hexo基础</h2><p>基于Github pages 的静态博客所必须的步骤</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>提供了一个免费账户, 这对于我们来说可以很方便的搭建静态博客, 当然, 这也是本篇的目标. </p><ol><li>登录到GitHub, 如果没有GitHub帐号，使用你的邮箱注册GitHub帐号. </li><li>点击GitHub中的New repository创建新仓库，仓库名应该为：</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure></div><p>用户名请使用你的GitHub帐号名称代替. 这是固定写法，比如我的仓库名为:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magnesium12<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure></div></p><h3 id="安装Git-amp-Node-js"><a href="#安装Git-amp-Node-js" class="headerlink" title="安装Git&amp;Node.js"></a>安装Git&amp;Node.js</h3><p>在安装前，你必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git  </li></ul><blockquote><p><strong> Windows 用户 </strong></p><p>如果你的电脑中尚未安装所需要的程序，请到官网下载Node.js &amp; Git的安装程序进行安装.<br>注意安装Node.js时注意勾选<strong>Add to PATH</strong>选项, 这将使得Node.js添加到你的计算机环境变量中.<br>Git安装完成后，右键菜单会出现git bash, 我们所有的命令都需要在git bash中执行,.</p></blockquote><p>下载Git可能会有些慢, 请耐心等待或者自行寻找过其他源. </p><h3 id="配置SSH免密访问"><a href="#配置SSH免密访问" class="headerlink" title="配置SSH免密访问"></a>配置SSH免密访问</h3><ol><li>本地安装 Git</li></ol><p>我本地是Windows，采用 git-bash. 如果你是新手的话, 在安装过程中只要一路next就OK</p><ol start="2"><li>配置本地免密ssh远程登陆</li></ol><p>在本地写作的机器上，搜索Git Bash，设置user.name和user.email配置信息：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></div></p><ol start="3"><li>生成ssh密钥文件</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></div><p>一路回车，<code>~/.ssh/</code>目录下会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件。</p><ol><li>打开GitHub_Settings_keys 页面，新建new SSH Key</li></ol><p>Title为标题，任意填即可，将刚刚复制的<code>id_rsa.pub</code>内容粘贴进去，最后点击Add SSH key.<br>在Git Bash中检测GitHub公钥设置是否成功，输入<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="selector-tag">ssh</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></div></p><ul><li>如果是第一次链接的话, 可能会询问是否创建 known_hosts文件, 当然是<code>yes</code></li></ul><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>如果你的电脑中已经安装上述必备程序，那么恭喜你！接下来只需使用 npm 即可完成 Hexo 的安装。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></div><p>Hexo安装完成后, 输入以下命令并执行</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></div><p>请注意, <code>&lt;folder&gt;</code>是你指定的文件夹路径, 并且该文件夹必须为空. <code>&lt;`</code>&gt;`是特殊字符, 命令端输入时应当去除, 例如</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init /d/<span class="keyword">Project</span>/Hexo</span><br><span class="line">cd /d/<span class="keyword">Project</span>/Hexo</span><br><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></div><p>或者直接打开Hexo文件夹, 右键git bash, 输入<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure></div></p><p>如果你看到<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Start blogging <span class="keyword">with</span> Hexo!`</span><br></pre></td></tr></table></figure></div></p><p>这意味着本地建站已完成, congratulations!你已经到达新手村. </p><h3 id="站点结构"><a href="#站点结构" class="headerlink" title="站点结构"></a>站点结构</h3><p>新建完成后, 本地hexo站点结构如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></div><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的配置信息, 你可以在这里选择配置大部分参数, 我们称为<code>站点配置文件</code>.</p><ul><li>可以设定主题, 网站标题, 副标题, author etc. 详情请阅读.md文档</li></ul><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息. </p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>模板文件夹, Hexo会根据scaffolds来建立文件. Hexo的模板是指在新建的markdown文件中默认填充的内容. 例如, 如果您修改scaffold/post.md中的Front-matter内容, 那么每次新建一篇文章时都会包含这个修改.</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方. 除_posts 文件夹之外, 开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略. Markdown 和 HTML 文件会被解析并放到 public 文件夹, 而其他文件会被拷贝过去. </p><ul><li>发布的博文存储在/public/</li></ul><h4 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h4><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><ul><li>存在默认主题, 但还是请选择一个你喜欢的主题, it does matter.</li><li>主题文件夹内会有<code>_config.yml</code>配置文件, 我们称为<code>主题配置文件</code></li></ul><h3 id="Hexo常用指令"><a href="#Hexo常用指令" class="headerlink" title="Hexo常用指令"></a>Hexo常用指令</h3><p>**请注意, 这些操作必须在../hexo/目录下进行</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><pre><code>$ hexo init [folder]</code></pre><p>新建一个网站。如果没有设置 folder , Hexo 默认在目前的文件夹建立网站. </p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><pre><code>$ hexo new [layout] &lt;title&gt;$ hexo n &quot;article&quot;</code></pre><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><pre><code>$ hexo generate$ hexo g</code></pre><p>生成静态文件。</p><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><pre><code>$ hexo deploy$ hexo d</code></pre><p>文件生成后立即部署网站</p><h4 id="generate-1"><a href="#generate-1" class="headerlink" title="generate"></a>generate</h4><pre><code>$ hexo gengerate$ hexo g</code></pre><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><pre><code>$ hexo server$ hexo s</code></pre><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> . 如果需要修改,<br>​    $ hexo sever -p 5000 #更改端口至5000</p><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><pre><code>$ hexo clean</code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后）, 如果发现您对站点的更改无论如何也不生效, 您可能需要运行该命令.</p><h3 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h3><p>如果你已经迫不及待地打开在hexo 目录下打开Git bash<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></div></p><p>在<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 你将预览到自己的博客, 但是别人是看不到的, 毕竟一般情况下别人不能看到你的计算机的本地内容. <strong>Github pages</strong>可以帮助我们解决这个问题. </p><p>下一步把GitHub和我们的Hexo关联起来, 打开站点的_config.yml, 找到<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span> </span><br><span class="line"><span class="symbol">  type:</span> </span><br><span class="line"><span class="symbol">  repo:</span> </span><br><span class="line"><span class="symbol">  branch:</span></span><br></pre></td></tr></table></figure></div></p><p>修改如下:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line">  <span class="meta">#创建仓库的完整路径, 末尾记得加.git</span></span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/Magnesium12/magnesium12.github.io.git </span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></div></p><blockquote><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。<br>最后安装Git部署插件, 输入命令:</p></blockquote><pre><code>npm install hexo-deployer-git --save</code></pre><p>现在我们输入:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure></div></p><p>在浏览器中输入: xxxx. github.io</p><p>你会发现这时你的博客已经上线,</p><p>Congratulations! </p><p><strong>Now. Sharing  the fantasy of your own to the world. </strong></p><h2 id="Hexo进阶"><a href="#Hexo进阶" class="headerlink" title="Hexo进阶"></a>Hexo进阶</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>注意到6.x版本next仓库的变动, 需要下载最新版本的同学请选择</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> hexo</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/theme-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure></div><p>之后跟进更新<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> theme/<span class="keyword">next</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></div></p><p>如果是从v5.x升级到v6.x, 请另行参阅<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">这篇文档</a></p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><ul><li><p>打开_config.yml 文件</p></li><li><p>阅读 README.md</p></li><li><p>依照字面意思来配置</p></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><em>眼睛不需要的话, 可以捐给其他人.    by 鲁迅</em></p><h3 id="swig"><a href="#swig" class="headerlink" title=".swig"></a>.swig</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unhandled rejection Error: ENOENT: no such file or directory, open 'D:<span class="symbol">\P</span>roject<span class="symbol">\H</span>exo<span class="symbol">\t</span>hemes<span class="symbol">\n</span>ext<span class="symbol">\l</span>ayout<span class="symbol">\_</span>scripts<span class="symbol">\s</span>chemes<span class="symbol">\.</span>swig'</span><br></pre></td></tr></table></figure></div><p>NexT使用版本:  5.1.4<br>原因：social加入链接时, #social: 这一行没有把注释打开…..</p><h3 id="怎么写博客"><a href="#怎么写博客" class="headerlink" title="怎么写博客"></a>怎么写博客</h3><ul><li>请bing一下markdown.</li><li>此外, 推荐<strong>VS Code</strong>作为你的博客项目管理工具.</li><li>推荐<strong>Typora</strong>作为你写markdown的书写工具.</li></ul><h3 id="语言设定"><a href="#语言设定" class="headerlink" title="语言设定"></a>语言设定</h3><p>请修改站点文件, zh-CN意味着站点语言默认为中文<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br></pre></td></tr></table></figure></div></p><h3 id="标签-amp-分类"><a href="#标签-amp-分类" class="headerlink" title="标签&amp;分类"></a>标签&amp;分类</h3><p>进入hexo文件夹<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span><span class="string">"tags"</span></span><br></pre></td></tr></table></figure></div></p><p>注意已生成source/tags/index.md,  index.md中修改如下<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-11</span><span class="bullet">-15</span> <span class="number">19</span><span class="string">:11:13</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div></p><p>当你试图为你的文章添加标签时, 请在文章头部添加<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">基于Hexo和Github搭建博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-12</span><span class="bullet">-14</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[npm,</span> <span class="string">hexo,</span> <span class="string">github]</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div></p><p>categories 分类 如上</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。Hexo同时也是GitHub上的开源项目，如果想要更加全面的了解Hexo，可以到其官网 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，你可以查阅到优质的中文文档.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zlee.xyz/categories/Hexo/"/>
    
    
      <category term="施工中" scheme="https://zlee.xyz/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"/>
    
      <category term="021" scheme="https://zlee.xyz/tags/021/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（三）：从JSON解决Ajax</title>
    <link href="https://zlee.xyz/2018/12/07/Python%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%88%AC%E5%8F%96js%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5/"/>
    <id>https://zlee.xyz/2018/12/07/Python爬虫（三）：爬取js动态网页/</id>
    <published>2018-12-07T15:34:54.000Z</published>
    <updated>2018-12-15T16:09:05.505Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>上一篇博文中, 笔者采用了selenium驱动chrome来抓取网页, 总结来看及其低效…..</li><li>想了一下, 不能这样搞, 他要刷新局部界面肯定是要利用JavaScript调用已经写好的json的. 通常来说不会有前端选择瞎搞地址. 如果能观察出那个json的地址特点, 就到了ButifulSoup为所欲为的时间辣(●’◡’●)</li><li>对于json参数偏移量不规律的网页,那当然是 <del>直接打死</del> ,哦不, <em>仔细观察</em>. 对于一个正常的前端同学来说, 不规律的json只可能是有限的, <del>我不做人啦,jojo!</del>. 我们只要把有限的偏移量写成一个字典(dic)就大功告成</li></ul></blockquote><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>Chrome浏览器</li><li>Python3.7</li><li>requests, BeautifulSoup4模块</li><li>一点点耐心以及正常的视力</li></ul><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul><li>chrome浏览器打开目标网页, </li><li>检查元素   <del>F12, CTRL+ shift+i, CTRL+shift+c爱用那个用哪个</del></li><li>继续加载内容，注意观察network栏下的xhr文件</li></ul><p><img src="https://img-blog.csdnimg.cn/20181124234006384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTAwOTQ4,size_16,color_FFFFFF,t_70" alt="图例"></p><ul><li>很明显，那个since=就是我们要找的<br>*点击展开，根据 Query string 构造parameter参数字典<br><img src="https://img-blog.csdnimg.cn/20181124234256796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTAwOTQ4,size_16,color_FFFFFF,t_70" alt="图例2"></li><li>requests 负责请求，bs4 为所欲为</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">json_url = <span class="string">'https://富强民主文明和谐'</span></span><br><span class="line"><span class="meta">#无规则偏移量，自行逆向分析得到偏移量字典</span></span><br><span class="line">since_list = [<span class="number">26961.554</span>, <span class="number">26961.474</span>, <span class="number">26961.419</span>, <span class="number">26961.346</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">#实现提取json，加载动态内容，但是封装性不好，不能重复利用</span></span><br><span class="line"><span class="function">def <span class="title">getMorePages</span>(<span class="params">list,count=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    params_list</span> = []</span><br><span class="line">    <span class="function"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="title">range</span>(<span class="params">count</span>):</span></span><br><span class="line"><span class="function">        keyword</span>=str(list[i])</span><br><span class="line">        params_list.append(&#123;</span><br><span class="line">            <span class="string">'since'</span>: keyword,</span><br><span class="line">            <span class="string">'grid_type'</span>: <span class="string">'flow'</span>,</span><br><span class="line">            <span class="string">'sort'</span>: <span class="string">'hot'</span>,</span><br><span class="line">            <span class="string">'tag_id'</span>: <span class="string">'399'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    url = json_url</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> params_list:</span><br><span class="line">        req=requests.<span class="keyword">get</span>(url, <span class="keyword">params</span>=i).content</span><br><span class="line">        soup=BeautifulSoup(req,<span class="string">'lxml'</span>)</span><br><span class="line">        getURL(soup)</span><br></pre></td></tr></table></figure></div><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>很显然，这样做效率会高很多  <del>发现json规律成为了木桶的最短板</del>，为了避免那个网站被薅羊毛，我就手动屏蔽惹OTZ……<br>另外，代码只放入了相关的一部分，有兴趣的同学可以尝试结合上一篇，整合功能鸭~<br>Good night！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;上一篇博文中, 笔者采用了selenium驱动chrome来抓取网页, 总结来看及其低效…..&lt;/li&gt;
&lt;li&gt;想了一下, 不能这样搞, 他要刷新局部界面肯定是要利用JavaScript调用已经写好的json的. 通常来说不会有前端选择瞎搞地址. 如果能观察出那个json的地址特点, 就到了ButifulSoup为所欲为的时间辣(●’◡’●)&lt;/li&gt;
&lt;li&gt;对于json参数偏移量不规律的网页,那当然是 &lt;del&gt;直接打死&lt;/del&gt; ,哦不, &lt;em&gt;仔细观察&lt;/em&gt;. 对于一个正常的前端同学来说, 不规律的json只可能是有限的, &lt;del&gt;我不做人啦,jojo!&lt;/del&gt;. 我们只要把有限的偏移量写成一个字典(dic)就大功告成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zlee.xyz/categories/Python/"/>
    
    
      <category term="Web Crawler" scheme="https://zlee.xyz/tags/Web-Crawler/"/>
    
      <category term="实例" scheme="https://zlee.xyz/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>推歌：A LETTER</title>
    <link href="https://zlee.xyz/2018/12/03/%E6%AD%8C%E6%9B%B2%E6%8E%A8%E8%8D%90The-Song-For-You/"/>
    <id>https://zlee.xyz/2018/12/03/歌曲推荐The-Song-For-You/</id>
    <published>2018-12-03T10:45:27.000Z</published>
    <updated>2018-12-15T07:10:04.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/03/5c05272799b4b.jpg" alt="午夜"></p><blockquote class="blockquote-center"><i> You don’t have to throw your life away </i></blockquote><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=499027&auto=1&height=66"></iframe><p><em>本来也不想写文字，但是不写一点文字,又怎么知道当时所思所想是什么，自己又是为什么要去写这篇博文呢?</em></p><p>……</p><p> <em>A LETTER</em> 是由<a href="https://zh.moegirl.org/%E6%B3%BD%E9%87%8E%E5%BC%98%E4%B9%8B" target="_blank" rel="noopener">泽野弘之</a><br>创作的插曲——也许提及<em>高达UC</em>会让他更容易被想起.</p><p>歌姬Cyua确实很适合去唱这首歌, 她的声线与舒缓空旷的乐音彼此交融, 编织出这首弥漫着伤感, 空灵以及希望的歌曲. 倘若你愿意闭上双眸, 浮现出的场景大概会是独角兽在孤独地进行着只属于自己的宇宙漫途, 但或许你需要知道的是, 这首歌曲更多在表达的是对自己的鼓励和对未来的希冀.</p><p>每个人都是宇宙中的独角兽, 命运指定的航线终将我们彼此分离, 忙碌追赶又有什么意义呢？命运的轨迹充满了错误,  等待我们的会是痛苦, 遗憾, 还是……希望?</p><p>指向正确的道路或许很艰辛, 可是总有一天能够到达尽头. </p><p><em>Now you see light in pain.</em></p><p><strong>Kevin .</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/03/5c05272799b4b.jpg&quot; alt=&quot;午夜&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;i&gt; You don’t have to throw your life away &lt;/i&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://zlee.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="私货" scheme="https://zlee.xyz/tags/%E7%A7%81%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（二）：Selenium + ChromeDriver 解决异步加载</title>
    <link href="https://zlee.xyz/2018/12/01/Python%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ASelenium%20+%20ChromeDriver%20%E8%A7%A3%E5%86%B3%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    <id>https://zlee.xyz/2018/12/01/Python爬虫（二）：Selenium + ChromeDriver 解决异步加载/</id>
    <published>2018-12-01T02:16:50.000Z</published>
    <updated>2018-12-15T16:01:38.391Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>在上一篇博文中, python代码趋向于平铺直叙——或者说代码习惯十分不好, 稍微复杂点的功能都会举步维艰</li><li>对于选择使用js控制加载网页结构的网站, 以urllib为基础的python库来说无法<del>直接</del>解决这个问题，例如爬取下拉刷新的网页：”<a href="https://bcy.net/coser&quot;" target="_blank" rel="noopener">https://bcy.net/coser&quot;</a></li><li>但是事在人为, 对于笔者这个小白来说还是有<del>傻瓜式</del>替代解决思路的, 虽然很慢==</li></ul></blockquote><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>默认看过<a href="https://blog.csdn.net/qq_40900948/article/details/84305541" target="_blank" rel="noopener">Python爬虫（一）：Requests&amp;BS4 爬虫实例</a></li><li>预装模块: requests, selenium, bs4, os</li><li>下载<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">chromedriver</a></li></ul><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul><li>bs4+selenium+chromedriver <del>强行爆破</del> 模拟点击行为获取完全加载的html</li><li><del>然后用beautifulsoup为所欲为</del><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># **************************Declaration**************************</span></span><br><span class="line"><span class="comment"># @File name:        Crawler</span></span><br><span class="line"><span class="comment"># @Function:         requests+selenium+chromedriver</span></span><br><span class="line"><span class="comment"># @Author:           Ogiso Kazusa</span></span><br><span class="line"><span class="comment"># @Date:             2018/11/15</span></span><br><span class="line"><span class="comment"># @Version Number:   2.0</span></span><br><span class="line"><span class="comment"># ******************************end******************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#常量</span></span><br><span class="line">URL = <span class="string">'https://bcy.net'</span></span><br><span class="line">index_url = <span class="string">'https://bcy.net/coser'</span></span><br><span class="line">CachePath = <span class="string">"D:\\CrawlerCache\\"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#储存CN的键值对, 用于isInDic()</span></span><br><span class="line">dic=&#123;<span class="string">'test'</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查字典, 判断是否下载过</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isInDic</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> src <span class="keyword">in</span> dic:</span><br><span class="line">        dic[src] = dic[src] + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[src] = <span class="number">0</span></span><br><span class="line">    dst = src + <span class="string">"_"</span> + str(dic[src])</span><br><span class="line">    <span class="keyword">return</span> dst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="comment"># 去除首位空格</span></span><br><span class="line">    path = path.strip()</span><br><span class="line">    <span class="comment"># 去除尾部 \ 符号</span></span><br><span class="line">    path = path.rstrip(<span class="string">"\\"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断路径是否存在</span></span><br><span class="line">    <span class="comment"># 存在     True</span></span><br><span class="line">    <span class="comment"># 不存在   False</span></span><br><span class="line">    isExists = os.path.exists(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        <span class="comment"># 如果不存在则创建目录</span></span><br><span class="line">        <span class="comment"># 创建目录操作函数</span></span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        print(path + <span class="string">' 创建成功'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果目录存在则不创建，并提示目录已存在</span></span><br><span class="line">        print(path + <span class="string">' 目录已存在'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现图片下载功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImg</span><span class="params">(url, name)</span>:</span></span><br><span class="line">    <span class="comment"># 请求url页面内容,此时页面为图床页面,只有图片内容</span></span><br><span class="line">    url = requests.get(url)</span><br><span class="line">    <span class="comment"># 格式和下载位置</span></span><br><span class="line"></span><br><span class="line">    path = CachePath + name + <span class="string">".jpg"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 迭代器和生成器,实现下载</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(url.content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#驱动chrome,获取加载完全的html</span></span><br><span class="line"><span class="comment">#木桶效应的最短板, 也是本次解决方案的致命点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJsHtml</span><span class="params">(URL, cosImg)</span>:</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(URL)</span><br><span class="line">    html = driver.page_source</span><br><span class="line">    driver.close()</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    content = soup.find_all(<span class="string">'div'</span>, &#123;<span class="string">"class"</span>: <span class="string">"img-wrap-inner"</span>&#125;)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> content:</span><br><span class="line">        src = element.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line"></span><br><span class="line">        name=cosImg + <span class="string">'_'</span> + str(i)</span><br><span class="line">        downloadImg(src, name)</span><br><span class="line">        print(<span class="string">"下载进度："</span>,i)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定存储目录CachePath,没有则生成</span></span><br><span class="line">mkdir(CachePath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求页面内容</span></span><br><span class="line">session = requests.get(index_url)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取requests 对象的内容，建议使用content，requests会尝试提供字节数</span></span><br><span class="line">soup = BeautifulSoup(session.content, <span class="string">"lxml"</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># find 直接返回值, findall 返回列表(list)</span></span><br><span class="line">index = soup.find_all(<span class="string">'a'</span>, &#123;<span class="string">'class'</span>: <span class="string">"db posr ovf"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> index:</span><br><span class="line">    <span class="comment"># print(element)可以看到</span></span><br><span class="line">    <span class="comment"># 利用标签的父子关系，能够选择标签或者子标签中的属性值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我们获取cos发布地址</span></span><br><span class="line">    img_url = element[<span class="string">'href'</span>]</span><br><span class="line">    url = URL + img_url</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CN = element.get('title')貌似两种写法均可</span></span><br><span class="line">    CN = element[<span class="string">'title'</span>]</span><br><span class="line">    print(<span class="string">'准备下载：'</span> + CN)</span><br><span class="line">    CN = isInDic(CN)</span><br><span class="line">    getJsHtml(url, CN)</span><br><span class="line"></span><br><span class="line"><span class="comment">#大功告成</span></span><br><span class="line"><span class="comment">#可以考虑指定需要获取的json？</span></span><br></pre></td></tr></table></figure></div><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><ul><li>吐槽一下, 这玩意儿奇慢无比, 调用浏览器中出现了大量不必要的步骤==</li><li>另一种意义上的模拟人类点击机制, <del>慢也有点用?</del>,效率实在太低</li><li>令人头皮发麻，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在上一篇博文中, python代码趋向于平铺直叙——或者说代码习惯十分不好, 稍微复杂点的功能都会举步维艰&lt;/li&gt;
&lt;li&gt;对于选择使用js控制加载网页结构的网站, 以urllib为基础的python库来说无法&lt;del&gt;直接&lt;/del&gt;解决这个问题，例如爬取下拉刷新的网页：”&lt;a href=&quot;https://bcy.net/coser&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bcy.net/coser&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;但是事在人为, 对于笔者这个小白来说还是有&lt;del&gt;傻瓜式&lt;/del&gt;替代解决思路的, 虽然很慢==&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zlee.xyz/categories/Python/"/>
    
    
      <category term="Web Crawler" scheme="https://zlee.xyz/tags/Web-Crawler/"/>
    
      <category term="实例" scheme="https://zlee.xyz/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（一）:Requests&amp;BS4 爬虫实例</title>
    <link href="https://zlee.xyz/2018/12/01/Python%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ARequests&amp;BS4%20%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B/"/>
    <id>https://zlee.xyz/2018/12/01/Python爬虫（一）：Requests&amp;BS4 爬虫实例/</id>
    <published>2018-12-01T02:16:34.000Z</published>
    <updated>2018-12-14T11:11:21.351Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>这篇文章主要是方便入门爬虫的同学获得入门的正反馈，配合代码注释可能轻松<del>愉悦</del>的对爬虫有个大概了解~</li><li>我们选择对于使用静态网页的小说网站, 小说的文本内容往往分配在一个&lt;div里,  <strong>逻辑比较简单</strong>. </li><li>那就开始吧＜（＾－＾）＞</li></ul></blockquote><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>安装python3.7</li><li>安装requests, BeautifulSoup4(或者说bs4)</li><li>安装chrome浏览器</li><li>掌握Python基础语法 </li></ul><p>可以尝试 <a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程-Python 3 教程</a> </p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul><li>请求URL指向的页面-&gt;获取网页内容</li><li>设定筛选条件-&gt;获取指定内容</li><li>写入本地文件</li></ul><h2 id="检查网站代码"><a href="#检查网站代码" class="headerlink" title="检查网站代码"></a>检查网站代码</h2><ul><li><strong>ctrl +shift +c</strong>, 检查网页源代码[^3], 得知章节地址<br><del><em>F12</em></del>, <del><em>ctrl+shift+i</em></del> , <del><em>右键-检查</em></del>, 等等均可</li><li>[^3]:本教程仅供参考, 保护创作者版权, 提倡付费阅读</li></ul><ul><li><p>根据章节地址跳转页面</p></li><li><p>检查章节页面, 得知章节文本内容 </p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># coding=utf-8</span></span><br><span class="line"><span class="meta"># *********************Declaration*********************</span></span><br><span class="line"><span class="meta"># @File name:        WebCrawler</span></span><br><span class="line"><span class="meta"># @Function:         Download Single Novel</span></span><br><span class="line"><span class="meta"># @Author:           Ogiso Kazusa                    </span></span><br><span class="line"><span class="meta"># @Date:             2018/11/14                      </span></span><br><span class="line"><span class="meta"># @Version Number:   1.0    </span></span><br><span class="line"><span class="meta"># *************************end*************************</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#导入模块</span></span><br><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="meta">#小说网页目录地址, 准备遍历全部章节地址</span></span><br><span class="line">index_url=<span class="string">'https://www.88dush.com/xiaoshuo/27/27584/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#获取页面内容</span></span><br><span class="line">index_req=requests.<span class="keyword">get</span>(index_url)</span><br><span class="line">index_html=index_req.content</span><br><span class="line">page_main=BeautifulSoup(index_html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#创建D盘根目录文件“单本下载.txt”，</span></span><br><span class="line"><span class="meta">#格式为ab+:向二进制文件末添加数据，且允许读；</span></span><br><span class="line">fo=open(<span class="string">"D:\\单本下载.txt"</span>,<span class="string">"ab+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#获取div , class="mulu" 包含的内容</span></span><br><span class="line">chap_BS=page_main.find(<span class="string">"div"</span>,&#123;<span class="string">"class"</span>:<span class="string">"mulu"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#生成器对象</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> chap_BS.ul.children:</span><br><span class="line">    <span class="keyword">if</span> child!=<span class="string">"\n"</span>:</span><br><span class="line">        <span class="meta">#href：目标url的属性名</span></span><br><span class="line">        chap_url=index_url+child.a.<span class="keyword">get</span>(<span class="string">"href"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="meta">#素质三联，获取lxml文档</span></span><br><span class="line">        chap_req=requests.<span class="keyword">get</span>(chap_url)</span><br><span class="line">        chap_html=chap_req.content.decode(<span class="string">"gbk"</span>)</span><br><span class="line">        soup_text=BeautifulSoup(chap_html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="meta">#寻找div段落，class=yd_text2的属性块内容</span></span><br><span class="line">        chap_text=soup_text.find(<span class="string">"div"</span>，&#123;<span class="string">"class"</span>:<span class="string">"yd_text2"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="meta">#.text指获取文字内容，\r\n是指写入文件中的换行符, ==</span></span><br><span class="line">        fo.write((child.<span class="keyword">string</span>+ <span class="string">"\r\n"</span>+chap_text.text+<span class="string">"\r\n"</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        print(child.<span class="keyword">string</span>+<span class="string">'\t已下载'</span>)</span><br><span class="line">        </span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure></div><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这篇文章主要是方便入门爬虫的同学获得入门的正反馈，配合代码注释可能轻松&lt;del&gt;愉悦&lt;/del&gt;的对爬虫有个大概了解~&lt;/li&gt;
&lt;li&gt;我们选择对于使用静态网页的小说网站, 小说的文本内容往往分配在一个&amp;lt;div里,  &lt;strong&gt;逻辑比较简单&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;那就开始吧＜（＾－＾）＞&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zlee.xyz/categories/Python/"/>
    
    
      <category term="Web Crawler" scheme="https://zlee.xyz/tags/Web-Crawler/"/>
    
      <category term="实例" scheme="https://zlee.xyz/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>A Whisper To The World</title>
    <link href="https://zlee.xyz/2018/12/01/A-Whisper-To-The-World/"/>
    <id>https://zlee.xyz/2018/12/01/A-Whisper-To-The-World/</id>
    <published>2018-11-30T17:36:32.000Z</published>
    <updated>2018-12-15T07:22:39.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/01/5c017a914a980.jpg" alt="Nier"></p><p></p><p blockquote="" class="centerquote"><i> NieR:Automata </i></p><blockquote><p>Everything that lives is designed to end.<br>一切活着的事物，都注定要终结。<br>We are perpetually trapped …<br>我们被永远地囚禁……<br>… in a never-ending spiral of life and death.<br>……于永无止境的生死轮回之中。<br>Is this a curse?<br>这是一种诅咒？<br>Or some kind of punishment?<br>还是某种惩罚？<br>I often think about the god who blessed us with this cryptic puzzle …<br>我时常想起那用模糊的谜团祝福我们的神……<br>… and wonder if we’ll ever have the chance to kill him.<br>……并猜想我们是否终有弑神的机会。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/01/5c017a914a980.jpg&quot; alt=&quot;Nier&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p blockquote=&quot;&quot; class=&quot;centerquote&quot;&gt;&lt;i&gt; NieR:Automata 
      
    
    </summary>
    
      <category term="随笔" scheme="https://zlee.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Ridiculous" scheme="https://zlee.xyz/tags/Ridiculous/"/>
    
      <category term="Thought" scheme="https://zlee.xyz/tags/Thought/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zlee.xyz/2018/11/30/hello-world/"/>
    <id>https://zlee.xyz/2018/11/30/hello-world/</id>
    <published>2018-11-29T17:36:32.000Z</published>
    <updated>2018-12-12T12:55:24.124Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel=" "><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hello" scheme="https://zlee.xyz/tags/hello/"/>
    
  </entry>
  
</feed>
