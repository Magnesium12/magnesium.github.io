<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>12TH`s Cabin</title>
  
  <subtitle>Who will fall in love with ordinary?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zlee.xyz/"/>
  <updated>2018-12-14T07:46:59.085Z</updated>
  <id>https://zlee.xyz/</id>
  
  <author>
    <name>Kevin Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="https://zlee.xyz/2018/12/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://zlee.xyz/2018/12/13/数据结构/</id>
    <published>2018-12-13T00:36:32.000Z</published>
    <updated>2018-12-14T07:46:59.085Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/13/5c11f0fcb44df.jpg" alt="配图不重要]"></p><blockquote class="centerquote"><i>谨以此文, 纪念我没怎么听的数据结构</i></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/13/5c11f0fcb44df.jpg&quot; alt=&quot;配图不重要]&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;centerquote&quot;&gt;&lt;i&gt;谨以此文, 纪念我没怎么听的数据结构&lt;/i&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="课程" scheme="https://zlee.xyz/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="课程笔记" scheme="https://zlee.xyz/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="自学OTZ" scheme="https://zlee.xyz/tags/%E8%87%AA%E5%AD%A6OTZ/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial For Hexo</title>
    <link href="https://zlee.xyz/2018/12/12/Simple-Tutorial-For-Hexo/"/>
    <id>https://zlee.xyz/2018/12/12/Simple-Tutorial-For-Hexo/</id>
    <published>2018-12-12T12:47:25.000Z</published>
    <updated>2018-12-14T14:19:16.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。Hexo同时也是GitHub上的开源项目，如果想要更加全面的了解Hexo，可以到其官网 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，你可以查阅到优质的中文文档.</p></blockquote><a id="more"></a><h2 id="Hexo基础"><a href="#Hexo基础" class="headerlink" title="Hexo基础"></a>Hexo基础</h2><p>基于Github pages 的静态博客所必须的步骤</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>提供了一个免费账户, 这对于我们来说可以很方便的搭建静态博客, 当然, 这也是本篇的目标. </p><ol><li>登录到GitHub, 如果没有GitHub帐号，使用你的邮箱注册GitHub帐号. </li><li>点击GitHub中的New repository创建新仓库，仓库名应该为：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure></li></ol><p>用户名请使用你的GitHub帐号名称代替. 这是固定写法，比如我的仓库名为:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magnesium12<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure></p><h3 id="安装Git-amp-Node-js"><a href="#安装Git-amp-Node-js" class="headerlink" title="安装Git&amp;Node.js"></a>安装Git&amp;Node.js</h3><p>在安装前，你必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git  </li></ul><blockquote><p><strong> Windows 用户 </strong></p><p>如果你的电脑中尚未安装所需要的程序，请到官网下载Node.js &amp; Git的安装程序进行安装.<br>注意安装Node.js时注意勾选<strong>Add to PATH</strong>选项, 这将使得Node.js添加到你的计算机环境变量中.<br>Git安装完成后，右键菜单会出现git bash, 我们所有的命令都需要在git bash中执行,.</p></blockquote><p>下载Git可能会有些慢, 请耐心等待或者自行寻找过其他源. </p><h3 id="配置SSH免密访问"><a href="#配置SSH免密访问" class="headerlink" title="配置SSH免密访问"></a>配置SSH免密访问</h3><ol><li>本地安装 Git</li></ol><p>我本地是Windows，采用 git-bash. 如果你是新手的话, 在安装过程中只要一路next就OK</p><ol start="2"><li>配置本地免密ssh远程登陆</li></ol><p>在本地写作的机器上，搜索Git Bash，设置user.name和user.email配置信息：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li>生成ssh密钥文件<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></li></ol><p>一路回车，<code>~/.ssh/</code>目录下会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件。</p><ol start="4"><li>打开GitHub_Settings_keys 页面，新建new SSH Key</li></ol><p>Title为标题，任意填即可，将刚刚复制的<code>id_rsa.pub</code>内容粘贴进去，最后点击Add SSH key.<br>在Git Bash中检测GitHub公钥设置是否成功，输入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="selector-tag">ssh</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></p><ul><li>如果是第一次链接的话, 可能会询问是否创建 known_hosts文件, 当然是<pre><code>yes</code></pre></li></ul><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>如果你的电脑中已经安装上述必备程序，那么恭喜你！接下来只需使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>Hexo安装完成后, 输入以下命令并执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>请注意, <code>&lt;folder&gt;</code>是你指定的文件夹路径, 并且该文件夹必须为空. <code>&lt;`</code>&gt;`是特殊字符, 命令端输入时应当去除, 例如</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init /d/<span class="keyword">Project</span>/Hexo</span><br><span class="line">cd /d/<span class="keyword">Project</span>/Hexo</span><br><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>或者直接打开Hexo文件夹, 右键git bash, 输入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure></p><p>如果你看到<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Start blogging <span class="keyword">with</span> Hexo!`</span><br></pre></td></tr></table></figure></p><p>这意味着本地建站已完成, congratulations!你已经到达新手村. </p><h3 id="站点结构"><a href="#站点结构" class="headerlink" title="站点结构"></a>站点结构</h3><p>新建完成后, 本地hexo站点结构如下</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的配置信息, 你可以在这里选择配置大部分参数, 我们称为<code>站点配置文件</code>.</p><ul><li>可以设定主题, 网站标题, 副标题, author etc. 详情请阅读.md文档</li></ul><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息. </p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>模板文件夹, Hexo会根据scaffolds来建立文件. Hexo的模板是指在新建的markdown文件中默认填充的内容. 例如, 如果您修改scaffold/post.md中的Front-matter内容, 那么每次新建一篇文章时都会包含这个修改.</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方. 除_posts 文件夹之外, 开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略. Markdown 和 HTML 文件会被解析并放到 public 文件夹, 而其他文件会被拷贝过去. </p><ul><li>发布的博文存储在/public/</li></ul><h4 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h4><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><ul><li>存在默认主题, 但还是请选择一个你喜欢的主题, it does matter.</li><li>主题文件夹内会有<code>_config.yml</code>配置文件, 我们称为<code>主题配置文件</code></li></ul><h3 id="Hexo常用指令"><a href="#Hexo常用指令" class="headerlink" title="Hexo常用指令"></a>Hexo常用指令</h3><p>**请注意, 这些操作必须在../hexo/目录下进行</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><pre><code>$ hexo init [folder]</code></pre><p>新建一个网站。如果没有设置 folder , Hexo 默认在目前的文件夹建立网站. </p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><pre><code>$ hexo new [layout] &lt;title&gt;$ hexo n &quot;article&quot;</code></pre><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><pre><code>$ hexo generate$ hexo g</code></pre><p>生成静态文件。</p><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><pre><code>$ hexo deploy$ hexo d</code></pre><p>文件生成后立即部署网站</p><h4 id="generate-1"><a href="#generate-1" class="headerlink" title="generate"></a>generate</h4><pre><code>$ hexo gengerate$ hexo g</code></pre><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><pre><code>$ hexo server$ hexo s</code></pre><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> . 如果需要修改,<br>​    $ hexo sever -p 5000 #更改端口至5000</p><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><pre><code>$ hexo clean</code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后）, 如果发现您对站点的更改无论如何也不生效, 您可能需要运行该命令.</p><h3 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h3><p>如果你已经迫不及待地打开在hexo 目录下打开Git bash<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></p><p>在<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 你将预览到自己的博客, 但是别人是看不到的, 毕竟一般情况下别人不能看到你的计算机的本地内容. <strong>Github pages</strong>可以帮助我们解决这个问题. </p><p>下一步把GitHub和我们的Hexo关联起来, 打开站点的_config.yml, 找到<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span> </span><br><span class="line"><span class="symbol">  type:</span> </span><br><span class="line"><span class="symbol">  repo:</span> </span><br><span class="line"><span class="symbol">  branch:</span></span><br></pre></td></tr></table></figure></p><p>修改如下:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line">  <span class="meta">#创建仓库的完整路径, 末尾记得加.git</span></span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/Magnesium12/magnesium12.github.io.git </span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></p><blockquote><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。<br>最后安装Git部署插件, 输入命令:</p></blockquote><pre><code>npm install hexo-deployer-git --save</code></pre><p>现在我们输入:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure></p><p>在浏览器中输入: xxxx. github.io</p><p>你会发现这时你的博客已经上线,</p><p>Congratulations! </p><p><strong>Now. Sharing  the fantasy of your own to the world. </strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。Hexo同时也是GitHub上的开源项目，如果想要更加全面的了解Hexo，可以到其官网 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，你可以查阅到优质的中文文档.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zlee.xyz/categories/Hexo/"/>
    
    
      <category term="施工中" scheme="https://zlee.xyz/tags/%E6%96%BD%E5%B7%A5%E4%B8%AD/"/>
    
      <category term="021" scheme="https://zlee.xyz/tags/021/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（三）：从JSON解决Ajax</title>
    <link href="https://zlee.xyz/2018/12/07/Python%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%88%AC%E5%8F%96js%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5/"/>
    <id>https://zlee.xyz/2018/12/07/Python爬虫（三）：爬取js动态网页/</id>
    <published>2018-12-07T15:34:54.000Z</published>
    <updated>2018-12-14T08:43:46.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>上一篇博文中, 笔者采用了selenium驱动chrome来抓取网页, 总结来看及其低效…..</li><li>想了一下, 不能这样搞, 他要刷新局部界面肯定是要利用JavaScript调用已经写好的json的. 通常来说不会有前端选择瞎搞地址. 如果能观察出那个json的地址特点, 就到了ButifulSoup为所欲为的时间辣(●’◡’●)</li><li>对于json参数偏移量不规律的网页,那当然是 <del>直接打死</del> ,哦不, <em>仔细观察</em>. 对于一个正常的前端同学来说, 不规律的json只可能是有限的, <del>我不做人啦,jojo!</del>. 我们只要把有限的偏移量写成一个字典(dic)就大功告成</li></ul></blockquote><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>Chrome浏览器</li><li>Python3.7</li><li>requests, BeautifulSoup4模块</li><li>一点点耐心以及正常的视力</li></ul><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul><li>chrome浏览器打开目标网页, </li><li>检查元素   <del>F12, CTRL+ shift+i, CTRL+shift+c爱用那个用哪个</del></li><li>继续加载内容，注意观察network栏下的xhr文件</li></ul><p><img src="https://img-blog.csdnimg.cn/20181124234006384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTAwOTQ4,size_16,color_FFFFFF,t_70" alt="图例"></p><ul><li>很明显，那个since=就是我们要找的<br>*点击展开，根据 Query string 构造parameter参数字典<br><img src="https://img-blog.csdnimg.cn/20181124234256796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTAwOTQ4,size_16,color_FFFFFF,t_70" alt="图例2"></li><li>requests 负责请求，bs4 为所欲为</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">json_url = <span class="string">'https://富强民主文明和谐'</span></span><br><span class="line"><span class="meta">#无规则偏移量，自行逆向分析得到偏移量字典</span></span><br><span class="line">since_list = [<span class="number">26961.554</span>, <span class="number">26961.474</span>, <span class="number">26961.419</span>, <span class="number">26961.346</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">#实现提取json，加载动态内容，但是封装性不好，不能重复利用</span></span><br><span class="line"><span class="function">def <span class="title">getMorePages</span>(<span class="params">list,count=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    params_list</span> = []</span><br><span class="line">    <span class="function"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="title">range</span>(<span class="params">count</span>):</span></span><br><span class="line"><span class="function">        keyword</span>=str(list[i])</span><br><span class="line">        params_list.append(&#123;</span><br><span class="line">            <span class="string">'since'</span>: keyword,</span><br><span class="line">            <span class="string">'grid_type'</span>: <span class="string">'flow'</span>,</span><br><span class="line">            <span class="string">'sort'</span>: <span class="string">'hot'</span>,</span><br><span class="line">            <span class="string">'tag_id'</span>: <span class="string">'399'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    url = json_url</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> params_list:</span><br><span class="line">        req=requests.<span class="keyword">get</span>(url, <span class="keyword">params</span>=i).content</span><br><span class="line">        soup=BeautifulSoup(req,<span class="string">'lxml'</span>)</span><br><span class="line">        getURL(soup)</span><br></pre></td></tr></table></figure><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>很显然，这样做效率会高很多  <del>发现json规律成为了木桶的最短板</del>，为了避免那个网站被薅羊毛，我就手动屏蔽惹OTZ……<br>另外，代码只放入了相关的一部分，有兴趣的同学可以尝试结合上一篇，整合功能鸭~<br>Good night！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;上一篇博文中, 笔者采用了selenium驱动chrome来抓取网页, 总结来看及其低效…..&lt;/li&gt;
&lt;li&gt;想了一下, 不能这样搞, 他要刷新局部界面肯定是要利用JavaScript调用已经写好的json的. 通常来说不会有前端选择瞎搞地址. 如果能观察出那个json的地址特点, 就到了ButifulSoup为所欲为的时间辣(●’◡’●)&lt;/li&gt;
&lt;li&gt;对于json参数偏移量不规律的网页,那当然是 &lt;del&gt;直接打死&lt;/del&gt; ,哦不, &lt;em&gt;仔细观察&lt;/em&gt;. 对于一个正常的前端同学来说, 不规律的json只可能是有限的, &lt;del&gt;我不做人啦,jojo!&lt;/del&gt;. 我们只要把有限的偏移量写成一个字典(dic)就大功告成&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zlee.xyz/categories/Python/"/>
    
    
      <category term="Web Crawler" scheme="https://zlee.xyz/tags/Web-Crawler/"/>
    
      <category term="实例" scheme="https://zlee.xyz/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>推歌：A LETTER</title>
    <link href="https://zlee.xyz/2018/12/03/%E6%AD%8C%E6%9B%B2%E6%8E%A8%E8%8D%90The-Song-For-You/"/>
    <id>https://zlee.xyz/2018/12/03/歌曲推荐The-Song-For-You/</id>
    <published>2018-12-03T10:45:27.000Z</published>
    <updated>2018-12-13T05:34:11.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/03/5c05272799b4b.jpg" alt="午夜"></p><blockquote class="centerquote"><i> You don’t have to throw your life away </i></blockquote><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=499027&auto=1&height=66"></iframe><p><em>本来也不想写文字，但是不写一点文字,又怎么知道当时所思所想是什么，自己又是为什么要去写这篇博文呢?</em></p><p>……</p><p> <em>A LETTER</em> 是由<a href="https://zh.moegirl.org/%E6%B3%BD%E9%87%8E%E5%BC%98%E4%B9%8B" target="_blank" rel="noopener">泽野弘之</a><br>创作的插曲——也许提及<em>高达UC</em>会让他更容易被想起.</p><p>歌姬Cyua确实很适合去唱这首歌, 她的声线与舒缓空旷的乐音彼此交融, 编织出这首弥漫着伤感, 空灵以及希望的歌曲. 倘若你愿意闭上双眸, 浮现出的场景大概会是独角兽在孤独地进行着只属于自己的宇宙漫途, 但或许你需要知道的是, 这首歌曲更多在表达的是对自己的鼓励和对未来的希冀.</p><p>每个人都是宇宙中的独角兽, 命运指定的航线终将我们彼此分离, 忙碌追赶又有什么意义呢？命运的轨迹充满了错误,  等待我们的会是痛苦, 遗憾, 还是……希望?</p><p>指向正确的道路或许很艰辛, 可是总有一天能够到达尽头. </p><p><em>Now you see light in pain.</em></p><p><strong>Kevin .</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/03/5c05272799b4b.jpg&quot; alt=&quot;午夜&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;centerquote&quot;&gt;&lt;i&gt; You don’t have to throw your life away &lt;/i&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://zlee.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="私货" scheme="https://zlee.xyz/tags/%E7%A7%81%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（二）：Selenium + ChromeDriver 解决异步加载</title>
    <link href="https://zlee.xyz/2018/12/01/Python%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ASelenium%20+%20ChromeDriver%20%E8%A7%A3%E5%86%B3%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    <id>https://zlee.xyz/2018/12/01/Python爬虫（二）：Selenium + ChromeDriver 解决异步加载/</id>
    <published>2018-12-01T02:16:50.000Z</published>
    <updated>2018-12-14T08:43:46.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>在上一篇博文中, python代码趋向于平铺直叙——或者说代码习惯十分不好, 稍微复杂点的功能都会举步维艰</li><li>对于选择使用js控制加载网页结构的网站, 以urllib为基础的python库来说无法<del>直接</del>解决这个问题，例如爬取下拉刷新的网页：”<a href="https://bcy.net/coser&quot;" target="_blank" rel="noopener">https://bcy.net/coser&quot;</a></li><li>但是事在人为, 对于笔者这个小白来说还是有<del>傻瓜式</del>替代解决思路的, 虽然很慢==</li></ul></blockquote><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>默认看过<a href="https://blog.csdn.net/qq_40900948/article/details/84305541" target="_blank" rel="noopener">Python爬虫（一）：Requests&amp;BS4 爬虫实例</a></li><li>预装模块: requests, selenium, bs4, os</li><li>下载<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">chromedriver</a></li></ul><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul><li>bs4+selenium+chromedriver <del>强行爆破</del> 模拟点击行为获取完全加载的html</li><li><del>然后用beautifulsoup为所欲为</del><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># **************************Declaration**************************</span></span><br><span class="line"><span class="comment"># @File name:        Crawler</span></span><br><span class="line"><span class="comment"># @Function:         requests+selenium+chromedriver</span></span><br><span class="line"><span class="comment"># @Author:           Ogiso Kazusa</span></span><br><span class="line"><span class="comment"># @Date:             2018/11/15</span></span><br><span class="line"><span class="comment"># @Version Number:   2.0</span></span><br><span class="line"><span class="comment"># ******************************end******************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#常量</span></span><br><span class="line">URL = <span class="string">'https://bcy.net'</span></span><br><span class="line">index_url = <span class="string">'https://bcy.net/coser'</span></span><br><span class="line">CachePath = <span class="string">"D:\\CrawlerCache\\"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#储存CN的键值对, 用于isInDic()</span></span><br><span class="line">dic=&#123;<span class="string">'test'</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查字典, 判断是否下载过</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isInDic</span><span class="params">(src)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> src <span class="keyword">in</span> dic:</span><br><span class="line">        dic[src] = dic[src] + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[src] = <span class="number">0</span></span><br><span class="line">    dst = src + <span class="string">"_"</span> + str(dic[src])</span><br><span class="line">    <span class="keyword">return</span> dst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="comment"># 去除首位空格</span></span><br><span class="line">    path = path.strip()</span><br><span class="line">    <span class="comment"># 去除尾部 \ 符号</span></span><br><span class="line">    path = path.rstrip(<span class="string">"\\"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断路径是否存在</span></span><br><span class="line">    <span class="comment"># 存在     True</span></span><br><span class="line">    <span class="comment"># 不存在   False</span></span><br><span class="line">    isExists = os.path.exists(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        <span class="comment"># 如果不存在则创建目录</span></span><br><span class="line">        <span class="comment"># 创建目录操作函数</span></span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        print(path + <span class="string">' 创建成功'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果目录存在则不创建，并提示目录已存在</span></span><br><span class="line">        print(path + <span class="string">' 目录已存在'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现图片下载功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImg</span><span class="params">(url, name)</span>:</span></span><br><span class="line">    <span class="comment"># 请求url页面内容,此时页面为图床页面,只有图片内容</span></span><br><span class="line">    url = requests.get(url)</span><br><span class="line">    <span class="comment"># 格式和下载位置</span></span><br><span class="line"></span><br><span class="line">    path = CachePath + name + <span class="string">".jpg"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 迭代器和生成器,实现下载</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(url.content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#驱动chrome,获取加载完全的html</span></span><br><span class="line"><span class="comment">#木桶效应的最短板, 也是本次解决方案的致命点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJsHtml</span><span class="params">(URL, cosImg)</span>:</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(URL)</span><br><span class="line">    html = driver.page_source</span><br><span class="line">    driver.close()</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    content = soup.find_all(<span class="string">'div'</span>, &#123;<span class="string">"class"</span>: <span class="string">"img-wrap-inner"</span>&#125;)</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> content:</span><br><span class="line">        src = element.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line"></span><br><span class="line">        name=cosImg + <span class="string">'_'</span> + str(i)</span><br><span class="line">        downloadImg(src, name)</span><br><span class="line">        print(<span class="string">"下载进度："</span>,i)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定存储目录CachePath,没有则生成</span></span><br><span class="line">mkdir(CachePath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求页面内容</span></span><br><span class="line">session = requests.get(index_url)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取requests 对象的内容，建议使用content，requests会尝试提供字节数</span></span><br><span class="line">soup = BeautifulSoup(session.content, <span class="string">"lxml"</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># find 直接返回值, findall 返回列表(list)</span></span><br><span class="line">index = soup.find_all(<span class="string">'a'</span>, &#123;<span class="string">'class'</span>: <span class="string">"db posr ovf"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> index:</span><br><span class="line">    <span class="comment"># print(element)可以看到</span></span><br><span class="line">    <span class="comment"># 利用标签的父子关系，能够选择标签或者子标签中的属性值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我们获取cos发布地址</span></span><br><span class="line">    img_url = element[<span class="string">'href'</span>]</span><br><span class="line">    url = URL + img_url</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CN = element.get('title')貌似两种写法均可</span></span><br><span class="line">    CN = element[<span class="string">'title'</span>]</span><br><span class="line">    print(<span class="string">'准备下载：'</span> + CN)</span><br><span class="line">    CN = isInDic(CN)</span><br><span class="line">    getJsHtml(url, CN)</span><br><span class="line"></span><br><span class="line"><span class="comment">#大功告成</span></span><br><span class="line"><span class="comment">#可以考虑指定需要获取的json？</span></span><br></pre></td></tr></table></figure><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><ul><li>吐槽一下, 这玩意儿奇慢无比, 调用浏览器中出现了大量不必要的步骤==</li><li>另一种意义上的模拟人类点击机制, <del>慢也有点用?</del>,效率实在太低</li><li>令人头皮发麻，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在上一篇博文中, python代码趋向于平铺直叙——或者说代码习惯十分不好, 稍微复杂点的功能都会举步维艰&lt;/li&gt;
&lt;li&gt;对于选择使用js控制加载网页结构的网站, 以urllib为基础的python库来说无法&lt;del&gt;直接&lt;/del&gt;解决这个问题，例如爬取下拉刷新的网页：”&lt;a href=&quot;https://bcy.net/coser&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bcy.net/coser&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;但是事在人为, 对于笔者这个小白来说还是有&lt;del&gt;傻瓜式&lt;/del&gt;替代解决思路的, 虽然很慢==&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zlee.xyz/categories/Python/"/>
    
    
      <category term="Web Crawler" scheme="https://zlee.xyz/tags/Web-Crawler/"/>
    
      <category term="实例" scheme="https://zlee.xyz/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫（一）:Requests&amp;BS4 爬虫实例</title>
    <link href="https://zlee.xyz/2018/12/01/Python%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ARequests&amp;BS4%20%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B/"/>
    <id>https://zlee.xyz/2018/12/01/Python爬虫（一）：Requests&amp;BS4 爬虫实例/</id>
    <published>2018-12-01T02:16:34.000Z</published>
    <updated>2018-12-14T11:11:21.351Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>这篇文章主要是方便入门爬虫的同学获得入门的正反馈，配合代码注释可能轻松<del>愉悦</del>的对爬虫有个大概了解~</li><li>我们选择对于使用静态网页的小说网站, 小说的文本内容往往分配在一个&lt;div里,  <strong>逻辑比较简单</strong>. </li><li>那就开始吧＜（＾－＾）＞</li></ul></blockquote><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>安装python3.7</li><li>安装requests, BeautifulSoup4(或者说bs4)</li><li>安装chrome浏览器</li><li>掌握Python基础语法 </li></ul><p>可以尝试 <a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程-Python 3 教程</a> </p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul><li>请求URL指向的页面-&gt;获取网页内容</li><li>设定筛选条件-&gt;获取指定内容</li><li>写入本地文件</li></ul><h2 id="检查网站代码"><a href="#检查网站代码" class="headerlink" title="检查网站代码"></a>检查网站代码</h2><ul><li><strong>ctrl +shift +c</strong>, 检查网页源代码[^3], 得知章节地址<br><del><em>F12</em></del>, <del><em>ctrl+shift+i</em></del> , <del><em>右键-检查</em></del>, 等等均可</li><li>[^3]:本教程仅供参考, 保护创作者版权, 提倡付费阅读</li></ul><ul><li><p>根据章节地址跳转页面</p></li><li><p>检查章节页面, 得知章节文本内容 </p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># coding=utf-8</span></span><br><span class="line"><span class="meta"># *********************Declaration*********************</span></span><br><span class="line"><span class="meta"># @File name:        WebCrawler</span></span><br><span class="line"><span class="meta"># @Function:         Download Single Novel</span></span><br><span class="line"><span class="meta"># @Author:           Ogiso Kazusa                    </span></span><br><span class="line"><span class="meta"># @Date:             2018/11/14                      </span></span><br><span class="line"><span class="meta"># @Version Number:   1.0    </span></span><br><span class="line"><span class="meta"># *************************end*************************</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#导入模块</span></span><br><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="meta">#小说网页目录地址, 准备遍历全部章节地址</span></span><br><span class="line">index_url=<span class="string">'https://www.88dush.com/xiaoshuo/27/27584/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#获取页面内容</span></span><br><span class="line">index_req=requests.<span class="keyword">get</span>(index_url)</span><br><span class="line">index_html=index_req.content</span><br><span class="line">page_main=BeautifulSoup(index_html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#创建D盘根目录文件“单本下载.txt”，</span></span><br><span class="line"><span class="meta">#格式为ab+:向二进制文件末添加数据，且允许读；</span></span><br><span class="line">fo=open(<span class="string">"D:\\单本下载.txt"</span>,<span class="string">"ab+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#获取div , class="mulu" 包含的内容</span></span><br><span class="line">chap_BS=page_main.find(<span class="string">"div"</span>,&#123;<span class="string">"class"</span>:<span class="string">"mulu"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#生成器对象</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> chap_BS.ul.children:</span><br><span class="line">    <span class="keyword">if</span> child!=<span class="string">"\n"</span>:</span><br><span class="line">        <span class="meta">#href：目标url的属性名</span></span><br><span class="line">        chap_url=index_url+child.a.<span class="keyword">get</span>(<span class="string">"href"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="meta">#素质三联，获取lxml文档</span></span><br><span class="line">        chap_req=requests.<span class="keyword">get</span>(chap_url)</span><br><span class="line">        chap_html=chap_req.content.decode(<span class="string">"gbk"</span>)</span><br><span class="line">        soup_text=BeautifulSoup(chap_html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="meta">#寻找div段落，class=yd_text2的属性块内容</span></span><br><span class="line">        chap_text=soup_text.find(<span class="string">"div"</span>，&#123;<span class="string">"class"</span>:<span class="string">"yd_text2"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="meta">#.text指获取文字内容，\r\n是指写入文件中的换行符, ==</span></span><br><span class="line">        fo.write((child.<span class="keyword">string</span>+ <span class="string">"\r\n"</span>+chap_text.text+<span class="string">"\r\n"</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        print(child.<span class="keyword">string</span>+<span class="string">'\t已下载'</span>)</span><br><span class="line">        </span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这篇文章主要是方便入门爬虫的同学获得入门的正反馈，配合代码注释可能轻松&lt;del&gt;愉悦&lt;/del&gt;的对爬虫有个大概了解~&lt;/li&gt;
&lt;li&gt;我们选择对于使用静态网页的小说网站, 小说的文本内容往往分配在一个&amp;lt;div里,  &lt;strong&gt;逻辑比较简单&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;那就开始吧＜（＾－＾）＞&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zlee.xyz/categories/Python/"/>
    
    
      <category term="Web Crawler" scheme="https://zlee.xyz/tags/Web-Crawler/"/>
    
      <category term="实例" scheme="https://zlee.xyz/tags/%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>A Whisper To The World</title>
    <link href="https://zlee.xyz/2018/12/01/A-Whisper-To-The-World/"/>
    <id>https://zlee.xyz/2018/12/01/A-Whisper-To-The-World/</id>
    <published>2018-11-30T17:36:32.000Z</published>
    <updated>2018-12-12T11:59:22.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/12/01/5c017a914a980.jpg" alt="Nier"></p><blockquote class="centerquote"><i> NieR:Automata </i></blockquote><blockquote><p>Everything that lives is designed to end.<br>一切活着的事物，都注定要终结。<br>We are perpetually trapped …<br>我们被永远地囚禁……<br>… in a never-ending spiral of life and death.<br>……于永无止境的生死轮回之中。<br>Is this a curse?<br>这是一种诅咒？<br>Or some kind of punishment?<br>还是某种惩罚？<br>I often think about the god who blessed us with this cryptic puzzle …<br>我时常想起那用模糊的谜团祝福我们的神……<br>… and wonder if we’ll ever have the chance to kill him.<br>……并猜想我们是否终有弑神的机会。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/01/5c017a914a980.jpg&quot; alt=&quot;Nier&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;centerquote&quot;&gt;&lt;i&gt; NieR:Automata &lt;/i&gt;&lt;/blockq
      
    
    </summary>
    
      <category term="随笔" scheme="https://zlee.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Ridiculous" scheme="https://zlee.xyz/tags/Ridiculous/"/>
    
      <category term="Thought" scheme="https://zlee.xyz/tags/Thought/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zlee.xyz/2018/11/30/hello-world/"/>
    <id>https://zlee.xyz/2018/11/30/hello-world/</id>
    <published>2018-11-29T17:36:32.000Z</published>
    <updated>2018-12-12T12:55:24.124Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hello" scheme="https://zlee.xyz/tags/hello/"/>
    
  </entry>
  
</feed>
